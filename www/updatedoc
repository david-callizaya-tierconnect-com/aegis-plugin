#!/usr/local/bin/php -q
<?php
  ini_set("display_errors", "on");
  error_reporting(E_ALL);
  define('MY_SIMPLE_API_KEY', 'AIzaSyChW3FQwHDadDDXVynuCa4PjGaxjQ5EclM');

/*  require_once('../youtube/lib/Madcoda/Youtube.php');

  use Madcoda\Youtube;

  $youtube = new Youtube(array('key' => MY_SIMPLE_API_KEY));

  $videoList = $youtube->searchVideos('Android');

var_dump($videoList);

die;*/

  set_include_path(get_include_path() . PATH_SEPARATOR . '/home/david/php/www/google/src');

  function autoload($className)
  {
      $fileName = str_replace('_','/', $className).'.php';
      require $fileName;
  }
  spl_autoload_register('autoload');

  $client = new Google_Client();
  $client->setApplicationName("AchachiYT");
  $client->setDeveloperKey(MY_SIMPLE_API_KEY);
  $client->setScopes('https://www.googleapis.com/auth/youtube');
  //$client->setUserCredentials("davidcallizaya@gmail.com", "pa$$word");

  // Define an object that will be used to make all API requests.
  $youtube = new Google_Service_YouTube($client);
  
// Check to ensure that the access token was successfully acquired.
//if ($client->getAccessToken()) {
$htmlBody='';
  try{
    // REPLACE this value with the path to the file you are uploading.
    $videoPath = "/home/david/workspaceXUL/seleniumIDE1/aegisPlugin.webm";

    // Create a snippet with title, description, tags and category ID
    // Create an asset resource and set its snippet metadata and type.
    // This example sets the video's title, description, keyword tags, and
    // video category.
    $snippet = new Google_Service_YouTube_VideoSnippet();
    $snippet->setTitle("Test title");
    $snippet->setDescription("Test description");
    $snippet->setTags(array("tag1", "tag2"));

    // Numeric video category. See
    // https://developers.google.com/youtube/v3/docs/videoCategories/list 
    $snippet->setCategoryId("22");

    // Set the video's status to "public". Valid statuses are "public",
    // "private" and "unlisted".
    $status = new Google_Service_YouTube_VideoStatus();
    $status->privacyStatus = "public";

    // Associate the snippet and status objects with a new video resource.
    $video = new Google_Service_YouTube_Video();
    $video->setSnippet($snippet);
    $video->setStatus($status);

    // Specify the size of each chunk of data, in bytes. Set a higher value for
    // reliable connection as fewer chunks lead to faster uploads. Set a lower
    // value for better recovery on less reliable connections.
    $chunkSizeBytes = 1 * 1024 * 1024;

    // Setting the defer flag to true tells the client to return a request which can be called
    // with ->execute(); instead of making the API call immediately.
    $client->setDefer(true);

    // Create a request for the API's videos.insert method to create and upload the video.
    $insertRequest = $youtube->videos->insert("status,snippet", $video);

    // Create a MediaFileUpload object for resumable uploads.
    $media = new Google_Http_MediaFileUpload(
        $client,
        $insertRequest,
        'video/*',
        null,
        true,
        $chunkSizeBytes
    );
    $media->setFileSize(filesize($videoPath));


    // Read the media file and upload it chunk by chunk.
    $status = false;
    $handle = fopen($videoPath, "rb");
    while (!$status && !feof($handle)) {
      $chunk = fread($handle, $chunkSizeBytes);
      $status = $media->nextChunk($chunk);
    }

    fclose($handle);

    // If you want to make other calls after the file upload, set setDefer back to false
    $client->setDefer(false);


    $htmlBody .= "<h3>Video Uploaded</h3><ul>";
    $htmlBody .= sprintf('<li>%s (%s)</li>',
        $status['snippet']['title'],
        $status['id']);

    $htmlBody .= '</ul>';

  } catch (Google_ServiceException $e) {
    $htmlBody .= sprintf('<p>A service error occurred: <code>%s</code></p>',
        htmlspecialchars($e->getMessage()));
  } catch (Google_Exception $e) {
    $htmlBody .= sprintf('<p>An client error occurred: <code>%s</code></p>',
        htmlspecialchars($e->getMessage()));
  }

//  $_SESSION['token'] = $client->getAccessToken();

  echo $htmlBody;

/*} else {
  // If the user hasn't authorized the app, initiate the OAuth flow
  $state = mt_rand();
  $client->setState($state);
  $_SESSION['state'] = $state;

  $authUrl = $client->createAuthUrl();
  $htmlBody = <<<END
  <h3>Authorization Required</h3>
  <p>You need to <a href="$authUrl">authorize access</a> before proceeding.<p>
END;
}*/

  echo "First PHP CLI script\n";
  echo exec('ls -l\n') . "\n";
?>